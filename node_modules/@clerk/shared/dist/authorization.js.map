{"version":3,"sources":["../src/authorization.ts"],"sourcesContent":["import type {\n  __experimental_SessionVerificationLevel,\n  __experimental_SessionVerificationMaxAge,\n  CheckAuthorizationWithCustomPermissions,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n} from '@clerk/types';\n\ntype MaxAgeMap = Record<__experimental_SessionVerificationMaxAge, number>;\ntype AuthorizationOptions = {\n  userId: string | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: string | null | undefined;\n  orgPermissions: string[] | null | undefined;\n  __experimental_factorVerificationAge: [number, number] | null;\n};\n\ntype CheckOrgAuthorization = (\n  params: { role?: OrganizationCustomRoleKey; permission?: OrganizationCustomPermissionKey },\n  { orgId, orgRole, orgPermissions }: AuthorizationOptions,\n) => boolean | null;\n\ntype CheckStepUpAuthorization = (\n  params: {\n    __experimental_assurance?: {\n      level: __experimental_SessionVerificationLevel;\n      maxAge: __experimental_SessionVerificationMaxAge;\n    };\n  },\n  { __experimental_factorVerificationAge }: AuthorizationOptions,\n) => boolean | null;\n\nconst MAX_AGE_TO_MINUTES: MaxAgeMap = {\n  'A1.10min': 10,\n  'A2.1hr': 60,\n  'A3.4hr': 240, //4 * 60\n  'A4.1day': 1440, //24 * 60,\n  'A5.1wk': 10080, //7 * 24 * 60,\n};\n\nconst ALLOWED_MAX_AGES = new Set<__experimental_SessionVerificationMaxAge>(\n  Object.keys(MAX_AGE_TO_MINUTES) as __experimental_SessionVerificationMaxAge[],\n);\nconst ALLOWED_LEVELS = new Set<__experimental_SessionVerificationLevel>([\n  'L1.firstFactor',\n  'L2.secondFactor',\n  'L3.multiFactor',\n]);\n\n// Helper functions\nconst isValidMaxAge = (maxAge: __experimental_SessionVerificationMaxAge) => ALLOWED_MAX_AGES.has(maxAge);\nconst isValidLevel = (level: __experimental_SessionVerificationLevel) => ALLOWED_LEVELS.has(level);\n\n/**\n * Checks if a user has the required organization-level authorization.\n * Verifies if the user has the specified role or permission within their organization.\n * @returns null, if unable to determine due to missing data or unspecified role/permission.\n */\nconst checkOrgAuthorization: CheckOrgAuthorization = (params, options) => {\n  const { orgId, orgRole, orgPermissions } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\n\n/**\n * Evaluates if the user meets step-up authentication requirements.\n * Compares the user's factor verification ages against the specified maxAge.\n * Handles different verification levels (first factor, second factor, multi-factor).\n * @returns null, if requirements or verification data are missing.\n */\nconst checkStepUpAuthorization: CheckStepUpAuthorization = (params, { __experimental_factorVerificationAge }) => {\n  if (!params.__experimental_assurance || !__experimental_factorVerificationAge) {\n    return null;\n  }\n  const { level, maxAge } = params.__experimental_assurance;\n\n  if (!isValidLevel(level) || !isValidMaxAge(maxAge)) {\n    return null;\n  }\n\n  const [factor1Age, factor2Age] = __experimental_factorVerificationAge;\n  const maxAgeInMinutes = MAX_AGE_TO_MINUTES[maxAge];\n\n  // -1 indicates the factor group (1fa,2fa) is not enabled\n  // -1 for 1fa is not a valid scenario, but we need to make sure we handle it properly\n  const isValidFactor1 = factor1Age !== -1 ? maxAgeInMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? maxAgeInMinutes > factor2Age : null;\n\n  switch (level) {\n    case 'L1.firstFactor':\n      return isValidFactor1;\n    case 'L2.secondFactor':\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case 'L3.multiFactor':\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\n\n/**\n * Creates a function for comprehensive user authorization checks.\n * Combines organization-level and step-up authentication checks.\n * The returned function authorizes if both checks pass, or if at least one passes\n * when the other is indeterminate. Fails if userId is missing.\n */\nexport const createCheckAuthorization = (options: AuthorizationOptions): CheckAuthorizationWithCustomPermissions => {\n  return (params): boolean => {\n    if (!options.userId) {\n      return false;\n    }\n\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA,IAAM,qBAAgC;AAAA,EACpC,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA;AAAA,EACV,WAAW;AAAA;AAAA,EACX,UAAU;AAAA;AACZ;AAEA,IAAM,mBAAmB,IAAI;AAAA,EAC3B,OAAO,KAAK,kBAAkB;AAChC;AACA,IAAM,iBAAiB,oBAAI,IAA6C;AAAA,EACtE;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAGD,IAAM,gBAAgB,CAAC,WAAqD,iBAAiB,IAAI,MAAM;AACvG,IAAM,eAAe,CAAC,UAAmD,eAAe,IAAI,KAAK;AAOjG,IAAM,wBAA+C,CAAC,QAAQ,YAAY;AACxE,QAAM,EAAE,OAAO,SAAS,eAAe,IAAI;AAC3C,MAAI,CAAC,OAAO,QAAQ,CAAC,OAAO,YAAY;AACtC,WAAO;AAAA,EACT;AACA,MAAI,CAAC,SAAS,CAAC,WAAW,CAAC,gBAAgB;AACzC,WAAO;AAAA,EACT;AAEA,MAAI,OAAO,YAAY;AACrB,WAAO,eAAe,SAAS,OAAO,UAAU;AAAA,EAClD;AACA,MAAI,OAAO,MAAM;AACf,WAAO,YAAY,OAAO;AAAA,EAC5B;AACA,SAAO;AACT;AAQA,IAAM,2BAAqD,CAAC,QAAQ,EAAE,qCAAqC,MAAM;AAC/G,MAAI,CAAC,OAAO,4BAA4B,CAAC,sCAAsC;AAC7E,WAAO;AAAA,EACT;AACA,QAAM,EAAE,OAAO,OAAO,IAAI,OAAO;AAEjC,MAAI,CAAC,aAAa,KAAK,KAAK,CAAC,cAAc,MAAM,GAAG;AAClD,WAAO;AAAA,EACT;AAEA,QAAM,CAAC,YAAY,UAAU,IAAI;AACjC,QAAM,kBAAkB,mBAAmB,MAAM;AAIjD,QAAM,iBAAiB,eAAe,KAAK,kBAAkB,aAAa;AAC1E,QAAM,iBAAiB,eAAe,KAAK,kBAAkB,aAAa;AAE1E,UAAQ,OAAO;AAAA,IACb,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,eAAe,KAAK,iBAAiB;AAAA,IAC9C,KAAK;AACH,aAAO,eAAe,KAAK,iBAAiB,kBAAkB;AAAA,EAClE;AACF;AAQO,IAAM,2BAA2B,CAAC,YAA2E;AAClH,SAAO,CAAC,WAAoB;AAC1B,QAAI,CAAC,QAAQ,QAAQ;AACnB,aAAO;AAAA,IACT;AAEA,UAAM,mBAAmB,sBAAsB,QAAQ,OAAO;AAC9D,UAAM,sBAAsB,yBAAyB,QAAQ,OAAO;AAEpE,QAAI,CAAC,kBAAkB,mBAAmB,EAAE,KAAK,OAAK,MAAM,IAAI,GAAG;AACjE,aAAO,CAAC,kBAAkB,mBAAmB,EAAE,KAAK,OAAK,MAAM,IAAI;AAAA,IACrE;AAEA,WAAO,CAAC,kBAAkB,mBAAmB,EAAE,MAAM,OAAK,MAAM,IAAI;AAAA,EACtE;AACF;","names":[]}