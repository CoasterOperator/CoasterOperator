import "./chunk-7ELT755Q.mjs";

// src/authorization.ts
var MAX_AGE_TO_MINUTES = {
  "A1.10min": 10,
  "A2.1hr": 60,
  "A3.4hr": 240,
  //4 * 60
  "A4.1day": 1440,
  //24 * 60,
  "A5.1wk": 10080
  //7 * 24 * 60,
};
var ALLOWED_MAX_AGES = new Set(
  Object.keys(MAX_AGE_TO_MINUTES)
);
var ALLOWED_LEVELS = /* @__PURE__ */ new Set([
  "L1.firstFactor",
  "L2.secondFactor",
  "L3.multiFactor"
]);
var isValidMaxAge = (maxAge) => ALLOWED_MAX_AGES.has(maxAge);
var isValidLevel = (level) => ALLOWED_LEVELS.has(level);
var checkOrgAuthorization = (params, options) => {
  const { orgId, orgRole, orgPermissions } = options;
  if (!params.role && !params.permission) {
    return null;
  }
  if (!orgId || !orgRole || !orgPermissions) {
    return null;
  }
  if (params.permission) {
    return orgPermissions.includes(params.permission);
  }
  if (params.role) {
    return orgRole === params.role;
  }
  return null;
};
var checkStepUpAuthorization = (params, { __experimental_factorVerificationAge }) => {
  if (!params.__experimental_assurance || !__experimental_factorVerificationAge) {
    return null;
  }
  const { level, maxAge } = params.__experimental_assurance;
  if (!isValidLevel(level) || !isValidMaxAge(maxAge)) {
    return null;
  }
  const [factor1Age, factor2Age] = __experimental_factorVerificationAge;
  const maxAgeInMinutes = MAX_AGE_TO_MINUTES[maxAge];
  const isValidFactor1 = factor1Age !== -1 ? maxAgeInMinutes > factor1Age : null;
  const isValidFactor2 = factor2Age !== -1 ? maxAgeInMinutes > factor2Age : null;
  switch (level) {
    case "L1.firstFactor":
      return isValidFactor1;
    case "L2.secondFactor":
      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;
    case "L3.multiFactor":
      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;
  }
};
var createCheckAuthorization = (options) => {
  return (params) => {
    if (!options.userId) {
      return false;
    }
    const orgAuthorization = checkOrgAuthorization(params, options);
    const stepUpAuthorization = checkStepUpAuthorization(params, options);
    if ([orgAuthorization, stepUpAuthorization].some((a) => a === null)) {
      return [orgAuthorization, stepUpAuthorization].some((a) => a === true);
    }
    return [orgAuthorization, stepUpAuthorization].every((a) => a === true);
  };
};
export {
  createCheckAuthorization
};
//# sourceMappingURL=authorization.mjs.map