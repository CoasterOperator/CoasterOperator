"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/authorization.ts
var authorization_exports = {};
__export(authorization_exports, {
  createCheckAuthorization: () => createCheckAuthorization
});
module.exports = __toCommonJS(authorization_exports);
var MAX_AGE_TO_MINUTES = {
  "A1.10min": 10,
  "A2.1hr": 60,
  "A3.4hr": 240,
  //4 * 60
  "A4.1day": 1440,
  //24 * 60,
  "A5.1wk": 10080
  //7 * 24 * 60,
};
var ALLOWED_MAX_AGES = new Set(
  Object.keys(MAX_AGE_TO_MINUTES)
);
var ALLOWED_LEVELS = /* @__PURE__ */ new Set([
  "L1.firstFactor",
  "L2.secondFactor",
  "L3.multiFactor"
]);
var isValidMaxAge = (maxAge) => ALLOWED_MAX_AGES.has(maxAge);
var isValidLevel = (level) => ALLOWED_LEVELS.has(level);
var checkOrgAuthorization = (params, options) => {
  const { orgId, orgRole, orgPermissions } = options;
  if (!params.role && !params.permission) {
    return null;
  }
  if (!orgId || !orgRole || !orgPermissions) {
    return null;
  }
  if (params.permission) {
    return orgPermissions.includes(params.permission);
  }
  if (params.role) {
    return orgRole === params.role;
  }
  return null;
};
var checkStepUpAuthorization = (params, { __experimental_factorVerificationAge }) => {
  if (!params.__experimental_assurance || !__experimental_factorVerificationAge) {
    return null;
  }
  const { level, maxAge } = params.__experimental_assurance;
  if (!isValidLevel(level) || !isValidMaxAge(maxAge)) {
    return null;
  }
  const [factor1Age, factor2Age] = __experimental_factorVerificationAge;
  const maxAgeInMinutes = MAX_AGE_TO_MINUTES[maxAge];
  const isValidFactor1 = factor1Age !== -1 ? maxAgeInMinutes > factor1Age : null;
  const isValidFactor2 = factor2Age !== -1 ? maxAgeInMinutes > factor2Age : null;
  switch (level) {
    case "L1.firstFactor":
      return isValidFactor1;
    case "L2.secondFactor":
      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;
    case "L3.multiFactor":
      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;
  }
};
var createCheckAuthorization = (options) => {
  return (params) => {
    if (!options.userId) {
      return false;
    }
    const orgAuthorization = checkOrgAuthorization(params, options);
    const stepUpAuthorization = checkStepUpAuthorization(params, options);
    if ([orgAuthorization, stepUpAuthorization].some((a) => a === null)) {
      return [orgAuthorization, stepUpAuthorization].some((a) => a === true);
    }
    return [orgAuthorization, stepUpAuthorization].every((a) => a === true);
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createCheckAuthorization
});
//# sourceMappingURL=authorization.js.map