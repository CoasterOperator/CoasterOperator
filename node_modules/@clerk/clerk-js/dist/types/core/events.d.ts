import type { TokenResource } from '@clerk/types';
export declare const events: {
    readonly TokenUpdate: "token:update";
};
type ClerkEvent = (typeof events)[keyof typeof events];
type EventHandler<E extends ClerkEvent> = (payload: EventPayload[E]) => void;
type TokenUpdatePayload = {
    token: TokenResource | null;
};
type EventPayload = {
    [events.TokenUpdate]: TokenUpdatePayload;
};
export declare const eventBus: {
    on: <E extends "token:update">(event: E, handler: EventHandler<E>) => void;
    dispatch: <E_1 extends "token:update">(event: E_1, payload: EventPayload[E_1]) => void;
    off: <E_2 extends "token:update">(event: E_2, handler?: EventHandler<E_2> | undefined) => void;
};
export {};
