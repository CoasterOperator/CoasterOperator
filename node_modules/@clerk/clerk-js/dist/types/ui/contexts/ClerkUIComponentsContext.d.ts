import type { HandleOAuthCallbackParams, OrganizationResource, UserResource } from '@clerk/types';
import React from 'react';
import type { NavbarRoute } from '../elements';
import type { ParsedQueryString } from '../router';
import type { AvailableComponentCtx, OrganizationProfileCtx, SignInCtx, SignUpCtx, UserProfileCtx, UserVerificationCtx } from '../types';
import type { CustomPageContent } from '../utils';
export declare const ComponentContext: React.Context<AvailableComponentCtx | null>;
export type SignUpContextType = SignUpCtx & {
    navigateAfterSignUp: () => any;
    queryParams: ParsedQueryString;
    signInUrl: string;
    signUpUrl: string;
    secondFactorUrl: string;
    authQueryString: string | null;
    afterSignUpUrl: string;
    afterSignInUrl: string;
};
export declare const useSignUpContext: () => SignUpContextType;
export type SignInContextType = SignInCtx & {
    navigateAfterSignIn: () => any;
    queryParams: ParsedQueryString;
    signUpUrl: string;
    signInUrl: string;
    signUpContinueUrl: string;
    authQueryString: string | null;
    afterSignUpUrl: string;
    afterSignInUrl: string;
    transferable: boolean;
};
export declare const useSignInContext: () => SignInContextType;
export type SignOutContextType = {
    navigateAfterSignOut: () => any;
    navigateAfterMultiSessionSingleSignOutUrl: () => any;
};
export declare const useSignOutContext: () => SignOutContextType;
type PagesType = {
    routes: NavbarRoute[];
    contents: CustomPageContent[];
    pageToRootNavbarRouteMap: Record<string, NavbarRoute>;
};
export type UserProfileContextType = UserProfileCtx & {
    queryParams: ParsedQueryString;
    authQueryString: string | null;
    pages: PagesType;
};
export declare const useUserProfileContext: () => UserProfileContextType;
export type UserVerificationContextType = UserVerificationCtx;
export declare const useUserVerification: () => UserVerificationContextType;
export declare const useUserButtonContext: () => {
    componentName: "UserButton";
    navigateAfterMultiSessionSingleSignOut: () => Promise<unknown>;
    navigateAfterSignOut: () => Promise<unknown>;
    navigateAfterSwitchSession: () => Promise<unknown>;
    signInUrl: string;
    userProfileUrl: string;
    afterMultiSessionSingleSignOutUrl: string;
    afterSignOutUrl: string;
    afterSwitchSessionUrl: string;
    userProfileMode: "modal" | "navigation";
    menutItems: import("../utils").MenuItem[];
    showName?: boolean | undefined;
    defaultOpen?: boolean | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    userProfileProps?: Pick<import("@clerk/types").UserProfileProps, "appearance" | "customPages" | "additionalOAuthScopes"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
} | {
    componentName: "UserButton";
    navigateAfterMultiSessionSingleSignOut: () => Promise<unknown>;
    navigateAfterSignOut: () => Promise<unknown>;
    navigateAfterSwitchSession: () => Promise<unknown>;
    signInUrl: string;
    userProfileUrl: string;
    afterMultiSessionSingleSignOutUrl: string;
    afterSignOutUrl: string;
    afterSwitchSessionUrl: string;
    userProfileMode: "modal" | "navigation";
    menutItems: import("../utils").MenuItem[];
    showName?: boolean | undefined;
    defaultOpen?: boolean | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    userProfileProps?: Pick<import("@clerk/types").UserProfileProps, "appearance" | "customPages" | "additionalOAuthScopes"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export declare const useOrganizationSwitcherContext: () => {
    hidePersonal: boolean;
    organizationProfileMode: "modal" | "navigation";
    createOrganizationMode: "modal" | "navigation";
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    afterCreateOrganizationUrl: string | ((organization: OrganizationResource) => string);
    afterLeaveOrganizationUrl: string;
    navigateOrganizationProfile: () => Promise<unknown>;
    navigateCreateOrganization: () => Promise<unknown>;
    navigateAfterSelectOrganization: (organization: OrganizationResource) => Promise<unknown>;
    navigateAfterSelectPersonal: (user: UserResource) => Promise<unknown>;
    componentName: "OrganizationSwitcher";
    createOrganizationUrl: string;
    organizationProfileUrl: string;
    defaultOpen?: boolean | undefined;
    afterSwitchOrganizationUrl?: string | undefined;
    afterSelectOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    afterSelectPersonalUrl?: ((string & Record<never, never>) | ":id" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":username" | ":firstName" | ":lastName" | ":primaryEmailAddressId" | ":primaryPhoneNumberId" | ":primaryWeb3WalletId" | ":externalId" | ":fullName" | ":passwordEnabled" | ":totpEnabled" | ":backupCodeEnabled" | ":twoFactorEnabled" | ":createOrganizationEnabled" | ":createOrganizationsLimit" | ":deleteSelfEnabled" | ":hasVerifiedEmailAddress" | ":hasVerifiedPhoneNumber") | ((user: UserResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    organizationProfileProps?: Pick<import("@clerk/types").OrganizationProfileProps, "appearance" | "customPages"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
} | {
    hidePersonal: boolean;
    organizationProfileMode: "modal" | "navigation";
    createOrganizationMode: "modal" | "navigation";
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    afterCreateOrganizationUrl: string | ((organization: OrganizationResource) => string);
    afterLeaveOrganizationUrl: string;
    navigateOrganizationProfile: () => Promise<unknown>;
    navigateCreateOrganization: () => Promise<unknown>;
    navigateAfterSelectOrganization: (organization: OrganizationResource) => Promise<unknown>;
    navigateAfterSelectPersonal: (user: UserResource) => Promise<unknown>;
    componentName: "OrganizationSwitcher";
    createOrganizationUrl: string;
    organizationProfileUrl?: undefined;
    defaultOpen?: boolean | undefined;
    afterSwitchOrganizationUrl?: string | undefined;
    afterSelectOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    afterSelectPersonalUrl?: ((string & Record<never, never>) | ":id" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":username" | ":firstName" | ":lastName" | ":primaryEmailAddressId" | ":primaryPhoneNumberId" | ":primaryWeb3WalletId" | ":externalId" | ":fullName" | ":passwordEnabled" | ":totpEnabled" | ":backupCodeEnabled" | ":twoFactorEnabled" | ":createOrganizationEnabled" | ":createOrganizationsLimit" | ":deleteSelfEnabled" | ":hasVerifiedEmailAddress" | ":hasVerifiedPhoneNumber") | ((user: UserResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    organizationProfileProps?: Pick<import("@clerk/types").OrganizationProfileProps, "appearance" | "customPages"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
} | {
    hidePersonal: boolean;
    organizationProfileMode: "modal" | "navigation";
    createOrganizationMode: "modal" | "navigation";
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    afterCreateOrganizationUrl: string | ((organization: OrganizationResource) => string);
    afterLeaveOrganizationUrl: string;
    navigateOrganizationProfile: () => Promise<unknown>;
    navigateCreateOrganization: () => Promise<unknown>;
    navigateAfterSelectOrganization: (organization: OrganizationResource) => Promise<unknown>;
    navigateAfterSelectPersonal: (user: UserResource) => Promise<unknown>;
    componentName: "OrganizationSwitcher";
    createOrganizationUrl?: undefined;
    organizationProfileUrl: string;
    defaultOpen?: boolean | undefined;
    afterSwitchOrganizationUrl?: string | undefined;
    afterSelectOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    afterSelectPersonalUrl?: ((string & Record<never, never>) | ":id" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":username" | ":firstName" | ":lastName" | ":primaryEmailAddressId" | ":primaryPhoneNumberId" | ":primaryWeb3WalletId" | ":externalId" | ":fullName" | ":passwordEnabled" | ":totpEnabled" | ":backupCodeEnabled" | ":twoFactorEnabled" | ":createOrganizationEnabled" | ":createOrganizationsLimit" | ":deleteSelfEnabled" | ":hasVerifiedEmailAddress" | ":hasVerifiedPhoneNumber") | ((user: UserResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    organizationProfileProps?: Pick<import("@clerk/types").OrganizationProfileProps, "appearance" | "customPages"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
} | {
    hidePersonal: boolean;
    organizationProfileMode: "modal" | "navigation";
    createOrganizationMode: "modal" | "navigation";
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    afterCreateOrganizationUrl: string | ((organization: OrganizationResource) => string);
    afterLeaveOrganizationUrl: string;
    navigateOrganizationProfile: () => Promise<unknown>;
    navigateCreateOrganization: () => Promise<unknown>;
    navigateAfterSelectOrganization: (organization: OrganizationResource) => Promise<unknown>;
    navigateAfterSelectPersonal: (user: UserResource) => Promise<unknown>;
    componentName: "OrganizationSwitcher";
    createOrganizationUrl?: undefined;
    organizationProfileUrl?: undefined;
    defaultOpen?: boolean | undefined;
    afterSwitchOrganizationUrl?: string | undefined;
    afterSelectOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    afterSelectPersonalUrl?: ((string & Record<never, never>) | ":id" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":username" | ":firstName" | ":lastName" | ":primaryEmailAddressId" | ":primaryPhoneNumberId" | ":primaryWeb3WalletId" | ":externalId" | ":fullName" | ":passwordEnabled" | ":totpEnabled" | ":backupCodeEnabled" | ":twoFactorEnabled" | ":createOrganizationEnabled" | ":createOrganizationsLimit" | ":deleteSelfEnabled" | ":hasVerifiedEmailAddress" | ":hasVerifiedPhoneNumber") | ((user: UserResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    organizationProfileProps?: Pick<import("@clerk/types").OrganizationProfileProps, "appearance" | "customPages"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export declare const useOrganizationListContext: () => {
    afterCreateOrganizationUrl: string | ((organization: OrganizationResource) => string);
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    hidePersonal: boolean;
    navigateAfterCreateOrganization: (organization: OrganizationResource) => Promise<unknown>;
    navigateAfterSelectOrganization: (organization: OrganizationResource) => Promise<unknown>;
    navigateAfterSelectPersonal: (user: UserResource) => Promise<unknown>;
    componentName: "OrganizationList";
    afterSelectOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    afterSelectPersonalUrl?: ((user: UserResource) => string) | ((string & Record<never, never>) | ":id" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":username" | ":firstName" | ":lastName" | ":primaryEmailAddressId" | ":primaryPhoneNumberId" | ":primaryWeb3WalletId" | ":externalId" | ":fullName" | ":passwordEnabled" | ":totpEnabled" | ":backupCodeEnabled" | ":twoFactorEnabled" | ":createOrganizationEnabled" | ":createOrganizationsLimit" | ":deleteSelfEnabled" | ":hasVerifiedEmailAddress" | ":hasVerifiedPhoneNumber") | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export type OrganizationProfileContextType = OrganizationProfileCtx & {
    pages: PagesType;
    navigateAfterLeaveOrganization: () => Promise<unknown>;
    navigateToGeneralPageRoot: () => Promise<unknown>;
    isMembersPageRoot: boolean;
    isGeneralPageRoot: boolean;
};
export declare const useOrganizationProfileContext: () => OrganizationProfileContextType;
export declare const useCreateOrganizationContext: () => {
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    navigateAfterCreateOrganization: (organization: OrganizationResource) => Promise<unknown>;
    componentName: "CreateOrganization";
    path: string | undefined;
    routing?: "path" | undefined;
    afterCreateOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    mode?: ("modal" | "mounted") | undefined;
} | {
    skipInvitationScreen: boolean;
    hideSlug: boolean;
    navigateAfterCreateOrganization: (organization: OrganizationResource) => Promise<unknown>;
    componentName: "CreateOrganization";
    path?: undefined;
    routing?: "hash" | "virtual" | undefined;
    afterCreateOrganizationUrl?: ((string & Record<never, never>) | ":name" | ":id" | ":slug" | ":imageUrl" | ":hasImage" | ":pathRoot" | ":membersCount" | ":pendingInvitationsCount" | ":adminDeleteEnabled" | ":maxAllowedMemberships") | ((organization: OrganizationResource) => string) | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export declare const useGoogleOneTapContext: () => {
    componentName: "GoogleOneTap";
    generateCallbackUrls: (returnBackUrl: string) => HandleOAuthCallbackParams;
    signInForceRedirectUrl?: string | null | undefined;
    signUpForceRedirectUrl?: string | null | undefined;
    cancelOnTapOutside?: boolean | undefined;
    itpSupport?: boolean | undefined;
    fedCmSupport?: boolean | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
};
export {};
